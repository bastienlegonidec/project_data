### Additional Feature 4 - Ratio of Bug Pixels to Total Pixels ###
def bug_to_total_ratio(mask):
    total_pixels = mask.shape[0] * mask.shape[1]
    bug_pixels = cv2.countNonZero(mask)
    return bug_pixels / total_pixels if total_pixels > 0 else 0

### Additional Feature 5 - Min, Max, Mean Values for Red, Green, and Blue within the Bug Mask ###
def min_max_mean_color(image, mask):
    image_isolee = cv2.bitwise_and(image, image, mask=mask)
    red_values = image_isolee[:, :, 0][mask != 0]
    green_values = image_isolee[:, :, 1][mask != 0]
    blue_values = image_isolee[:, :, 2][mask != 0]
    min_values = np.array([np.min(red_values), np.min(green_values), np.min(blue_values)])
    max_values = np.array([np.max(red_values), np.max(green_values), np.max(blue_values)])
    mean_values = np.array([np.mean(red_values), np.mean(green_values), np.mean(blue_values)])
    return np.concatenate((min_values, max_values, mean_values))
    
    # Adding the new features
    df.loc[df.index[i-1], 'Bug_to_Total_Ratio'] = bug_to_total_ratio(mask)
    min_max_mean_values = min_max_mean_color(image, mask)
    df.loc[df.index[i-1], ['Min_R', 'Min_G', 'Min_B', 'Max_R', 'Max_G', 'Max_B', 'Mean_R', 'Mean_G', 'Mean_B']] = min_max_mean_values


